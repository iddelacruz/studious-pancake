namespace Domain.Seedwork.Exceptions
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Exception generated by the business logic. 
    /// </summary>
    public class BusinessException : Exception
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessException"/> class.
        /// </summary>
        public BusinessException()
            : base() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessException"/> class.
        /// </summary>
        /// <param name="errorCode">Business error code.</param>
        public BusinessException(ErrorCode errorCode)
            : base()
        {
            this.ErrorCode = errorCode;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessException"/> class with a specified error message.
        /// </summary>
        /// <param name="errorCode">Business error code.</param>
        /// <param name="message">The message that describes the error.</param>
        public BusinessException(ErrorCode errorCode, string message)
            : base(message)
        {
            this.ErrorCode = errorCode;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessException"/> class with a specified error 
        /// message and a reference to the inner exception that is the cause of this exception.
        /// </summary>
        /// <param name="message">The error message that explains the reason for the exception.</param>
        /// <param name="errorCode">Business error code.</param>
        /// <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        public BusinessException(ErrorCode errorCode, string message, Exception innerException)
            : base(message, innerException)
        {
            this.ErrorCode = errorCode;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessException"/> class with serialized data.
        /// </summary>
        /// <param name="info">The <see cref="System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        /// <exception cref="System.ArgumentNullException">The info parameter is null.</exception>
        /// <exception cref="System.Runtime.Serialization.SerializationException">The class name is null or <see cref="System.Exception.HResult"/> is zero (0).</exception>
        protected BusinessException(SerializationInfo info, StreamingContext context)
            : base(info, context)
        {
            this.ErrorCode = (ErrorCode)info.GetInt32("ErrorCode");
        }

        /// <summary>
        /// Sets the <see cref="System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
        /// </summary>
        /// <param name="info">The <see cref="System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        /// <exception cref="System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic).</exception>
        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            if (info == null)
            {
                throw new ArgumentNullException("info");
            }
            info.AddValue("ErrorCode", this.ErrorCode);
            base.GetObjectData(info, context);
        }

        /// <summary>
        /// Gets the error code.
        /// </summary>
        /// <remarks>
        /// The error code allows you to uniquely identify the business error that occurred. 
        /// A table of error codes should be established that allows everyone involved
        /// in the business process to know exactly the problem that has occurred.  
        /// </remarks>
        public ErrorCode ErrorCode { get; }
    }
}
